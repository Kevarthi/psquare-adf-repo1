{
	"name": "dataflow_emp_dept",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "empsource"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText2",
						"type": "DatasetReference"
					},
					"name": "deptsource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1",
					"description": "Renaming join1 to select1 with columns 'eid, ename, sal, deptname'"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          eid as string,",
				"          ename as string,",
				"          sal as string,",
				"          deptid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empsource",
				"source(output(",
				"          deptid as string,",
				"          deptname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> deptsource",
				"empsource, deptsource join(empsource@deptid == deptsource@deptid,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          eid,",
				"          ename,",
				"          sal,",
				"          deptname",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(equals(deptname,'D&A')) ~> filter1",
				"filter1 derive(country = char(100)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['empanddept.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     outputAssertFailedRows: true,",
				"     mapColumn(",
				"          eid,",
				"          ename,",
				"          sal,",
				"          deptname,",
				"          country",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}